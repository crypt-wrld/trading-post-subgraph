// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  TypedMap,
  Entity,
  Value,
  ValueKind,
  store,
  Bytes,
  BigInt,
  BigDecimal
} from "@graphprotocol/graph-ts";

export class SaleOffer extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));

    this.set("tokenId", Value.fromBigInt(BigInt.zero()));
    this.set("amount", Value.fromBigInt(BigInt.zero()));
    this.set("price", Value.fromBigInt(BigInt.zero()));
    this.set("expiry", Value.fromBigInt(BigInt.zero()));
    this.set("feePercent", Value.fromBigInt(BigInt.zero()));
    this.set("feeFlat", Value.fromBigInt(BigInt.zero()));
    this.set("creationBlock", Value.fromBigInt(BigInt.zero()));
    this.set("creationTimestamp", Value.fromBigInt(BigInt.zero()));
    this.set("collected", Value.fromBoolean(false));
    this.set("seller", Value.fromBytes(Bytes.empty()));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save SaleOffer entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        "Cannot save SaleOffer entity with non-string ID. " +
          'Considering using .toHex() to convert the "id" to a string.'
      );
      store.set("SaleOffer", id.toString(), this);
    }
  }

  static load(id: string): SaleOffer | null {
    return changetype<SaleOffer | null>(store.get("SaleOffer", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get tokenId(): BigInt {
    let value = this.get("tokenId");
    return value!.toBigInt();
  }

  set tokenId(value: BigInt) {
    this.set("tokenId", Value.fromBigInt(value));
  }

  get amount(): BigInt {
    let value = this.get("amount");
    return value!.toBigInt();
  }

  set amount(value: BigInt) {
    this.set("amount", Value.fromBigInt(value));
  }

  get price(): BigInt {
    let value = this.get("price");
    return value!.toBigInt();
  }

  set price(value: BigInt) {
    this.set("price", Value.fromBigInt(value));
  }

  get expiry(): BigInt {
    let value = this.get("expiry");
    return value!.toBigInt();
  }

  set expiry(value: BigInt) {
    this.set("expiry", Value.fromBigInt(value));
  }

  get feePercent(): BigInt {
    let value = this.get("feePercent");
    return value!.toBigInt();
  }

  set feePercent(value: BigInt) {
    this.set("feePercent", Value.fromBigInt(value));
  }

  get feeFlat(): BigInt {
    let value = this.get("feeFlat");
    return value!.toBigInt();
  }

  set feeFlat(value: BigInt) {
    this.set("feeFlat", Value.fromBigInt(value));
  }

  get creationBlock(): BigInt {
    let value = this.get("creationBlock");
    return value!.toBigInt();
  }

  set creationBlock(value: BigInt) {
    this.set("creationBlock", Value.fromBigInt(value));
  }

  get creationTimestamp(): BigInt {
    let value = this.get("creationTimestamp");
    return value!.toBigInt();
  }

  set creationTimestamp(value: BigInt) {
    this.set("creationTimestamp", Value.fromBigInt(value));
  }

  get soldBlock(): BigInt | null {
    let value = this.get("soldBlock");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set soldBlock(value: BigInt | null) {
    if (!value) {
      this.unset("soldBlock");
    } else {
      this.set("soldBlock", Value.fromBigInt(<BigInt>value));
    }
  }

  get soldTimestamp(): BigInt | null {
    let value = this.get("soldTimestamp");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set soldTimestamp(value: BigInt | null) {
    if (!value) {
      this.unset("soldTimestamp");
    } else {
      this.set("soldTimestamp", Value.fromBigInt(<BigInt>value));
    }
  }

  get collected(): boolean {
    let value = this.get("collected");
    return value!.toBoolean();
  }

  set collected(value: boolean) {
    this.set("collected", Value.fromBoolean(value));
  }

  get seller(): Bytes {
    let value = this.get("seller");
    return value!.toBytes();
  }

  set seller(value: Bytes) {
    this.set("seller", Value.fromBytes(value));
  }

  get buyer(): Bytes | null {
    let value = this.get("buyer");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBytes();
    }
  }

  set buyer(value: Bytes | null) {
    if (!value) {
      this.unset("buyer");
    } else {
      this.set("buyer", Value.fromBytes(<Bytes>value));
    }
  }
}
